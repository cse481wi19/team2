<launch>
  <!-- rosbridge server for the frontend -->
  <include file="$(find rosbridge_server)/launch/rosbridge_websocket.launch" />

  <!-- map file for navigation -->
  <arg name="map_file" default="/home/kiet/catkin_ws/src/cse481wi19/maps/map.yaml" />
  <include file="$(find fetch_navigation)/launch/fetch_nav.launch">
    <arg name="map_file" value="$(arg map_file)" />
  </include>

  <include file="$(find robot_api)/launch/planning_context.launch" />

  <!-- GDB Debug Option -->
  <arg name="debug" default="false" />
  <arg unless="$(arg debug)" name="launch_prefix" value="" />
  <arg     if="$(arg debug)" name="launch_prefix"
	   value="gdb -x $(find fetch_moveit_config)/launch/gdb_settings.gdb --ex run --args" />

  <!-- Verbose Mode Option -->
  <arg name="info" default="$(arg debug)" />
  <arg unless="$(arg info)" name="command_args" value="" />
  <arg     if="$(arg info)" name="command_args" value="--debug" />

  <!-- move_group settings -->
  <arg name="allow_trajectory_execution" default="true"/>
  <arg name="allow_active_sensing" default="false"/>
  <arg name="fake_execution" default="false"/>
  <arg name="max_safe_path_cost" default="1"/>
  <arg name="jiggle_fraction" default="0.05" />
  <arg name="publish_monitored_planning_scene" default="true"/>
  <arg name="pipeline" default="$(optenv PLANNING_PIPELINE ompl)" />

  <!-- Planning Functionality -->
  <include ns="move_group" file="$(find fetch_moveit_config)/launch/planning_pipeline.launch.xml">
    <arg name="pipeline" value="$(arg pipeline)" />
  </include>

  <!-- Trajectory Execution Functionality -->
  <include ns="move_group" file="$(find fetch_moveit_config)/launch/trajectory_execution.launch.xml" if="$(arg allow_trajectory_execution)">
    <arg name="moveit_manage_controllers" value="true" />
    <arg name="moveit_controller_manager" value="fetch" unless="$(arg fake_execution)"/>
    <arg name="moveit_controller_manager" value="fake" if="$(arg fake_execution)"/>
  </include>

  <!-- Sensors Functionality -->
  <rosparam command="delete" param="move_group/sensors" />
  <include ns="move_group" file="$(find fetch_moveit_config)/launch/sensor_manager.launch.xml" if="$(arg allow_active_sensing)">
    <arg name="moveit_sensor_manager" value="fetch" />
  </include>

  <!-- Start the actual move_group node/action server -->
  <node name="move_group" launch-prefix="$(arg launch_prefix)" pkg="moveit_ros_move_group" type="move_group" respawn="false" output="screen" args="$(arg command_args)">
    <!-- Set the display variable, in case OpenGL code is used internally -->
    <env name="DISPLAY" value="$(optenv DISPLAY :0)" />

    <param name="allow_trajectory_execution" value="$(arg allow_trajectory_execution)"/>
    <param name="max_safe_path_cost" value="$(arg max_safe_path_cost)"/>
    <param name="jiggle_fraction" value="$(arg jiggle_fraction)" />

    <!-- MoveGroup capabilities to load -->
    <param name="capabilities" value="move_group/MoveGroupCartesianPathService
				      move_group/MoveGroupExecuteService
				      move_group/MoveGroupKinematicsService
				      move_group/MoveGroupMoveAction
				      move_group/MoveGroupPickPlaceAction
				      move_group/MoveGroupPlanService
				      move_group/MoveGroupQueryPlannersService
				      move_group/MoveGroupStateValidationService
				      move_group/MoveGroupGetPlanningSceneService
				      move_group/ApplyPlanningSceneService
				      move_group/ClearOctomapService
				      " />

    <!-- Publish the planning scene of the physical robot so that rviz plugin can know actual robot -->
    <param name="planning_scene_monitor/publish_planning_scene" value="$(arg publish_monitored_planning_scene)" />
    <param name="planning_scene_monitor/publish_geometry_updates" value="$(arg publish_monitored_planning_scene)" />
    <param name="planning_scene_monitor/publish_state_updates" value="$(arg publish_monitored_planning_scene)" />
    <param name="planning_scene_monitor/publish_transforms_updates" value="$(arg publish_monitored_planning_scene)" />
  </node>

  <!-- AR tag tracking -->
  <!-- <arg name="marker_size" default="5.6" /> -->
  <arg name="marker_size" default="1" />
  <!-- <arg name="max_new_marker_error" default="0.08" /> -->
  <arg name="max_new_marker_error" default="0.1" />
  <arg name="max_track_error" default="0.2" />
  <!-- <arg name="max_track_error" default="0.8" /> -->

  <arg name="cam_image_topic" default="/head_camera/depth_registered/points" />
  <arg name="cam_info_topic" default="/head_camera/rgb/camera_info" />
  <arg name="output_frame" default="/base_link" />

  <node name="ar_track_alvar" pkg="ar_track_alvar" type="individualMarkers" respawn="false" output="screen">
      <param name="marker_size"           type="double" value="$(arg marker_size)" />
      <param name="max_new_marker_error"  type="double" value="$(arg max_new_marker_error)" />
      <param name="max_track_error"       type="double" value="$(arg max_track_error)" />
      <param name="output_frame"          type="string" value="$(arg output_frame)" />

      <remap from="camera_image"  to="$(arg cam_image_topic)" />
      <remap from="camera_info"   to="$(arg cam_info_topic)" />
  </node>

  <!-- RVIZ -->
  <node pkg="rviz" type="rviz" name="$(anon rviz)" args="-d $(find roboeats)/rviz_settings/pbd.rviz" />

</launch>
